package tic;
import javax.swing.JFrame;
/**********************************************************************
 * Main function to run program.
 *
 * @author Micheal James
 * @version 1 August 2020
 *********************************************************************/
  public final class Main {
      private Main() {

      }

    /**********************************************************************
     * Main  static function to run program.
     *
     * @param args
     *********************************************************************/
     public static void main(final String[] args) {
        final JFrame ticTac = new JFrame("Tic-Tac-Toe"); //create new GUI titled
        ticTac.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //close on exit
        ticTac.setBounds(800, 900, 600, 900);  //set the bounds for the Game GUI
        ticTac.setVisible(true);    //make the GUI visible
         //gets the  content of Panel class for the GUI
        ticTac.getContentPane().add(new Panel());
    }
}

package tic;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.Font;
/**********************************************************************
 * Panel contains the brains and GUI for game.
 *
 * @author Micheal James
 * @version 1 August 2020
 *********************************************************************/
class Panel extends JPanel {
    /**panel for the AI toggle button and future buttons.**/
    final JPanel buttonPanel = new JPanel();
    /**panel for the game board.**/
    final JPanel boardPanel = new JPanel();
    /**label for AI button.**/
    final JLabel aIL = new JLabel("Toggle AI ON/OFF");
    /**label for AI button.**/
    final JLabel aIML = new JLabel("Toggle AI difficulty");
    /**label for AI button.**/
    final JLabel symbL = new JLabel("Toggle Player 1 Symbol");

    /**button to toggle AI on and off.**/
    final JButton aI = new JButton("AI OFF");
    /**button to toggle AI difficulty.**/
    final JButton aIM = new JButton("AI Easy Mode");
    /**button to toggle P1 symbol for X and O.**/
    final JButton symb = new JButton("P1 is O's");
    /**buttons to play on board.**/
    final JButton[] buttons = new JButton[9];
    /**determines whose turn it is.**/
    int turn = 0;
    /**determines what P1 symbol is.**/
    int p1Symb = 0;
    /**determines what AI difficulty is.**/
    private  int aIMode = 0;

     Panel() {
        //setting panel to 3/3 grid for board
        boardPanel.setLayout(new GridLayout(3, 3));
        add(boardPanel, "North");   //location of board is at top
         //setting size of board
        boardPanel.setPreferredSize(new Dimension(600, 600));


        add(buttonPanel, "South");  //setting location of AI button to bottom
         //setting the size of AI button panel
//         buttonPanel.setLayout(new GridLayout(2, 3));
         buttonPanel.setLayout(null);
        buttonPanel.setPreferredSize(new Dimension(600, 100));
        createBoard();  //calls function to generate board
    }
    /**********************************************************************
     * Void function that creates the game board.
     *
     *
     *********************************************************************/
    public void createBoard() {
        //setting font size for X and O's
        Font large = new Font("Dialog", Font.PLAIN, 200);
        //loops through each game button to represent game board
        for (int i = 0; i <= 8; i++) {
            buttons[i] = new JButton(); //creating each game location
            buttons[i].setText(""); //setting game location as blank
            //enabling button
            buttons[i].addActionListener(new ButtonListener());

            boardPanel.add(buttons[i]); //adds game buttons to JPanel
            buttons[i].setFont(large);  //sets the font to large for X and O
        }

        buttonPanel.add(this.aIML);   //adds AI  mode label to Jpanel
        aIML.setLocation(40, 10);
        aIML.setSize(180, 25);
        buttonPanel.add(this.aIL);   //adds AI mode label to Jpanel
        aIL.setLocation(235, 10);
        aIL.setSize(180, 25);
        buttonPanel.add(this.symbL);   //adds AI mode label to Jpanel
        symbL.setLocation(425, 10);
        symbL.setSize(180, 25);
        aIM.addActionListener(new ButtonListener()); //enables AI button
        buttonPanel.add(this.aIM);   //adds AI mode button to Jpanel
        aIM.setLocation(10, 40);
        aIM.setSize(180, 50);
        aI.addActionListener(new ButtonListener()); //enables AI button
        aI.setLocation(210, 40);
        aI.setSize(180, 50);
        buttonPanel.add(this.aI);   //adds AI button to Jpanel
        symb.addActionListener(new ButtonListener()); //enables AI button
        symb.setLocation(410, 40);
        symb.setSize(180, 50);
        buttonPanel.add(this.symb);   //adds AI button to Jpanel
    }

    public void clearBoard() {
        //loops through each glame button to clear it
        for (int i = 0; i <= 8; i++) {
            buttons[i].setText(""); //sets text to blank to clear
        }
    }

    /******************************************************************
     * Action listener that is triggered on a button press on the GUI.
     *
     *
     *****************************************************************/
    public class ButtonListener implements ActionListener {

        public void actionPerformed(final ActionEvent e) {
            //finds the button pressed
            JButton buttonPress = (JButton) e.getSource();
            //if it is the first turn and P1 is O's
            if (turn == 0 && buttonPress.getText().equals("P1 is O's")) {
                buttonPress.setText("P1 is X's");  //toggle P1 to X's
                p1Symb = 1; //flag for p1 symbol
                //if it is the first turn and P1 is x's
            } else if (turn == 0 && buttonPress.getText().equals("P1 is X's")) {
                buttonPress.setText("P1 is O's");   //toggle P1 to O's
                p1Symb = 0; //flag for p1 symbol
                //if game has already started and play tries to switch symbols
            } else if (turn > 0 && (buttonPress.getText().equals("P1 is X's")
                    || buttonPress.getText().equals("P1 is O's"))) {
                JOptionPane.showMessageDialog(null,
                        "Game has already started, unable to switch P1 symbol");
                //if button press is AI mode and on easy
            } else if (buttonPress.getText().equals("AI Easy Mode")) {
                buttonPress.setText("AI Hard Mode");   //toggle AI difficulty
                aIMode = 1; //sets AI to hard mode
                //if button press is AI mode and on easy
            } else if (buttonPress.getText().equals("AI Hard Mode")) {
                buttonPress.setText("AI Easy Mode");   //toggle AI difficulty
                aIMode = 0; //sets AI to hard mode
                //if it is P1 and tile is empty
            } else if (turn % 2 == 0 && buttonPress.getText().equals("")) {
                if (p1Symb == 0) { //check if p1 is O
                    buttonPress.setForeground(Color.BLUE);   //set text to blue
                    //place O for P1 play on pressed button
                    buttonPress.setText("O");
                } else { //if p1 is X
                    buttonPress.setForeground(Color.RED);   //set text to red
                    //place X for P1 play on pressed button
                    buttonPress.setText("X");
                }

                turn++; //increment number of turns
                ///if it is P2 and tile is empty
            } else if (turn % 2 == 1 && buttonPress.getText().equals("")) {
                if (p1Symb == 0) { //check if p1 is O
                    buttonPress.setForeground(Color.RED);   //set text to red
                    //place X for P2 play on pressed button
                    buttonPress.setText("X");
                } else {   //if p1 is X
                    buttonPress.setForeground(Color.BLUE); //set text to blue
                    //place O for P1 play on pressed button
                    buttonPress.setText("O");
                }
                turn++; //increment number of turns
                //if AI button is pressed toggle ON
            } else if (buttonPress.getText().equals("AI OFF")) {
                buttonPress.setText("AI ON");
                //if AI button is pressed toggle OFF
            } else if (buttonPress.getText().equals("AI ON")) {
                buttonPress.setText("AI OFF");
            } else {        //if user picks spot already taken notify user
                JOptionPane.showMessageDialog(null,
                        "Spot already taken. Pick another Spot");
            }
            if (checkForWin() && turn % 2 == 0) {   //check for Player 2 win
                //notify user of Player2  win
                JOptionPane.showMessageDialog(null,
                        "Game Over. Player 2 Wins");
                clearBoard();   //calls function to clear board
                turn = 0;   //reset number of turns
                //check for Player 1 win
            } else if (checkForWin() && turn % 2 == 1) {
                //notify user of Player 1 win
                JOptionPane.showMessageDialog(null,
                        "Game Over. Player 1 Wins");
                clearBoard();   //calls function to clear board
                turn = 0;   //reset number of turns
            } else if (turn == 10) {    //if there have been 9 plays
                JOptionPane.showMessageDialog(null,
                        "Game Over. Tie");  //notify user that the game is a tie
                clearBoard();   //calls function to clear board
                turn = 0;       //resets number of turns
            }
            //check if AI needs to play
            if (aI.getText().equals("AI ON") && turn % 2 == 1) {
                //location that AI plays
                int ai;
                if (aIMode == 0) {   //if AI easy mode
                     ai = aIPlay(); //make smarter AI play
                } else {   //if AI hard mode
                     ai = aIPlay2();    //make easier AI play
                }
                if (p1Symb == 0) {
                    //set text color to red
                    buttons[ai].setForeground(Color.RED);
                    //make AI play to where determined as a X
                    buttons[ai].setText("X");
                } else { //set text color to red
                    buttons[ai].setForeground(Color.BLUE);
                    //make AI play to where determined as a X
                    buttons[ai].setText("O");
                }
                turn++; //increment number of turns
            }

            if (checkForWin() && turn % 2 == 0) {   //check for Player 2 win
                //notify user of Player2  win
                JOptionPane.showMessageDialog(null,
                        "Game Over. Player 2 Wins");
                clearBoard();   //calls function to clear board
                turn = 0;   //reset number of turns
                //check for Player 1 win
            } else if (checkForWin() && turn % 2 == 1) {
                //notify user of Player 1 win
                JOptionPane.showMessageDialog(null,
                        "Game Over. Player 1 Wins");
                clearBoard();   //calls function to clear board
                turn = 0;   //reset number of turns
            } else if (turn == 10) {    //if there have been 9 plays
                JOptionPane.showMessageDialog(null,
                        "Game Over. Tie");  //notify user that the game is a tie
                clearBoard();   //calls function to clear board
                turn = 0;       //resets number of turns
            }
        }

    }
    /******************************************************************
     * Checks where the AI should play on easy mode or if no smart
     * move can be made.
     *
     * @return k location where AI should play
     *
     *****************************************************************/
    public int aIPlay() {
        //loop through all potential areas for AI to play
        int k = 0;
        for (int i = 0; i < 9; i++) {
            //check if area is not played on
            if (buttons[i].getText().equals("")) {
                k = i;
                break;
            }

        }
        return k;   //return location to play on
    }

    /******************************************************************
     * Checks where the AI should play on Hard mode. This checks for
     * if there is any play that can result in a block or win.
     *
     * @return k location where AI should play
     *
     *****************************************************************/
    public int aIPlay2() {
        //loop through all potential areas for AI to play
        int k = 0;
        for (int i = 0; i < 9; i++) {
            //first the AI checks to see then if they can win
            //check if area is not played on and p1 is O's
            if (buttons[i].getText().equals("") && p1Symb == 0) {
                buttons[i].setText("X");
                if (checkForWin()) { //check if this spot results in win
                    k = i;
                    buttons[i].setText(""); //clear temp spot
                    return k;   //return location to play on
                } else {
                    buttons[i].setText("");
                } //check if area is not played on and p1 is X's
            } else if (buttons[i].getText().equals("") && p1Symb == 1) {
                buttons[i].setText("O");
                if (checkForWin()) { //check if this spot results in win
                    k = i;
                    buttons[i].setText(""); //clear temp spot
                    return k;   //return location to play on
                } else {
                    buttons[i].setText(""); //clear temp spot
                }
            }
            //below checks to see then if a player can be blocked
            //check if area is not played on and p1 is O's
            if (buttons[i].getText().equals("") && p1Symb == 0) {
                buttons[i].setText("O");
                //check if this spot results in blocking win
                if (checkForWin()) {
                    k = i;
                    buttons[i].setText(""); //clear temp spot
                    return k;   //return location to play on
                } else {
                    buttons[i].setText("");
                } //check if area is not played on and p1 is X's
            } else if (buttons[i].getText().equals("") && p1Symb == 1) {
                buttons[i].setText("X");
                //check if this spot results in blocking win
                if (checkForWin()) {
                    k = i;
                    buttons[i].setText(""); //clear temp spot
                    return k;   //return location to play on
                } else {
                    buttons[i].setText(""); //clear temp spot
                }
            }

        }

            k = aIPlay();   //find a spot to play
                            // if a win or block is not an option
        return k;   //return location to play on
    }

    /******************************************************************
     * Check if a player has won.
     *
     * @return true if a player has won
     *
     *****************************************************************/
    public boolean checkForWin() {
        for (int i = 0; i <= 6; i += 3) {   //check for a horizontal win
            if (match(i, i + 1) && match(i + 1, i + 2)) {
                return true;
            }
        }


        for (int i = 0; i <= 2; i++) {    //check for a vertical win
            if (match(i, i + 3) && match(i + 3, i + 6)) {
                return true;
            }
        }


        for (int i = 0; i <= 1; i++) {   //check for a diagonal win
            if (match(i * 2, 4) && match(4, 8 - i * 2)) {
                return true;
            }
        }

        return false;   //if there is no win then return false
    }
    /******************************************************************
     * Check if two locations match text.
     *
     * @param x first button to check
     * @param y second button to check
     * @return true if text on both buttons match
     *
     *****************************************************************/
    public boolean match(final int x, final int y) {

        if (isPlayedOn(x)) {    //check if a tile is played on
            //check if two locations played on are from the same player
            return buttons[x].getText().equals(buttons[y].getText());
        } else {
            return false;   //if not return false
        }
    }
    /******************************************************************
     * Check if a spot has been played on.
     *
     * @param x button to check if played on
     * @return true if button has text therefore played on
     *
     *****************************************************************/
    public boolean isPlayedOn(final int x) {
        //check if button has a X or O to see if played on
        return buttons[x].getText().equals("X")
                || buttons[x].getText().equals("O");
    }
}

package tic;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**********************************************************************
 * Test cases for backend of tic tac toe game. This testing provides
 * 100% coverage on all methods and lines in Panel besides the
 * ButtonListener due to unknown way to test it.
 *
 * @author Mike James
 * @version 1 August 2020
 *********************************************************************/
class Junits {
    /** temp model for game.*/
    private Panel game;

    /** to be done after each test.*/
    @BeforeEach
    void setup() {
        // Make new  game model for testing
        game = new Panel();
    }

    @Test
    void createBoard() {
        //testing if create board works
        game = new Panel();
        game.createBoard();
        Assertions.assertTrue(game.buttons[3].getText().equals(""));
    }

    @Test
    void clearBoard() {
        //testing if clear board works
        game = new Panel();
        game.createBoard();
        game.buttons[3].setText("X");
        game.buttons[4].setText("X");
        game.buttons[5].setText("Y");
        game.clearBoard();
        Assertions.assertTrue(game.buttons[3].getText().equals(""));
    }

    @Test
    void aIPlay() {
        //checks if aIPlay works
        game.buttons[0].setText("X");
        game.buttons[1].setText("X");
        Assertions.assertTrue(game.aIPlay() == 2);
    }

    @Test
    void aIPlay2() {
        //checks if Hard AI is smart enough to block as an X
        game.buttons[0].setText("O");
        game.buttons[3].setText("O");
        Assertions.assertTrue(game.aIPlay2() == 6);
    }

    @Test
    void checkForWin() {
        //testing if row win works
        game = new Panel();
        game.buttons[1].setText("X");
        game.buttons[2].setText("X");
        game.buttons[0].setText("X");
        Assertions.assertTrue(game.checkForWin());
    }

    @Test
    void match() {
        //check if match Works
        game.buttons[1].setText("X");
        game.buttons[4].setText("X");
        Assertions.assertTrue(game.match(1,4));
    }

    @Test
    void isPlayedOn() {
        //check if isPlayedOn works
        game.buttons[1].setText("X");
        Assertions.assertTrue(game.isPlayedOn(1));
    }
    @Test
    void checkForFalseWin() {
        //testing if checkForWin can say false
        game.buttons[1].setText("X");
        game.buttons[2].setText("X");
        game.buttons[0].setText("Y");
        Assertions.assertFalse(game.checkForWin());
    }
    @Test
    void checkCollumnWin() {
        //checks for if collumn win works
        game.buttons[0].setText("X");
        game.buttons[3].setText("X");
        game.buttons[6].setText("X");
        Assertions.assertTrue(game.checkForWin());
    }
    @Test
    void checkDiagWin() {
        //checks for diagonal win works
        game.buttons[0].setText("X");
        game.buttons[4].setText("X");
        game.buttons[8].setText("X");
        Assertions.assertTrue(game.checkForWin());
    }

    @Test
    void checkifAIPlayworks() {
        //checks if aIPlay works
        game.buttons[0].setText("X");
        game.buttons[1].setText("X");
        Assertions.assertTrue(game.aIPlay() == 2);
    }
    @Test
    void checkifAIPlay2BlockWorksAsX() {
        //checks if Hard AI is smart enough to block as an X
        game.buttons[0].setText("O");
        game.buttons[3].setText("O");
        Assertions.assertTrue(game.aIPlay2() == 6);
    }
    @Test
    void checkifAIPlay2BlockWorksAsO() {
        //checks if Hard AI is smart enough to block as an O
        game.p1Symb = 1;    //sets P1 as X
        game.buttons[1].setText("X");
        game.buttons[4].setText("X");
        Assertions.assertTrue(game.aIPlay2() == 7);
    }
    @Test
    void checkifAIPlay2WinWorksAsX() {
        //checks if Hard AI is smart enough to win on purpose as an X
        game.buttons[0].setText("X");
        game.buttons[3].setText("X");
        Assertions.assertTrue(game.aIPlay2() == 6);
    }
    @Test
    void checkifAIPlay2WinWorksO() {
        //checks if Hard AI is smart enough to win on purpose as an O
        game.p1Symb = 1;    //sets P1 as O
        game.buttons[0].setText("O");
        game.buttons[4].setText("O");
        Assertions.assertTrue(game.aIPlay2() == 8);
    }
    @Test
    void checkifAIPlay2BackUpPlay() {
        //checks if Hard AI is smart enough to
        // find a play even if a win or block is not possible
        game.buttons[0].setText("O");
        game.buttons[5].setText("O");
        Assertions.assertTrue(game.aIPlay2() == 1);
    }
}
